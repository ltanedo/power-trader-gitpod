"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scanJSON = exports.scanIPC = exports.readIPC = exports.scanParquet = exports.readParquet = exports.scanCSV = exports.readJSON = exports.readCSV = void 0;
const polars_internal_1 = __importDefault(require("./internals/polars_internal"));
const dataframe_1 = require("./dataframe");
const utils_1 = require("./utils");
const dataframe_2 = require("./lazy/dataframe");
const readCsvDefaultOptions = {
    inferSchemaLength: 10,
    batchSize: 10,
    ignoreErrors: true,
    hasHeader: true,
    sep: ",",
    rechunk: false,
    startRows: 0,
    encoding: "utf8",
    lowMemory: false,
    parseDates: true,
};
const readJsonDefaultOptions = {
    batchSize: 1000,
    inline: false,
    inferSchemaLength: 10
};
function readCSV(arg, options) {
    const extensions = [".tsv", ".csv"];
    if (typeof arg === "string") {
        return readCSV({ ...options, file: arg, inline: !(0, utils_1.isPath)(arg, extensions) });
    }
    options = { ...readCsvDefaultOptions, ...arg };
    return (0, dataframe_1.dfWrapper)(polars_internal_1.default.df.read_csv(options));
}
exports.readCSV = readCSV;
function readJSON(arg, options) {
    const extensions = [".ndjson", ".json", ".jsonl"];
    if (typeof arg === "string") {
        return readJSON({ ...options, file: arg, inline: !(0, utils_1.isPath)(arg, extensions) });
    }
    options = { ...readJsonDefaultOptions, ...arg };
    return (0, dataframe_1.dfWrapper)(polars_internal_1.default.df.read_json(options));
}
exports.readJSON = readJSON;
function scanCSV(arg, options) {
    if (typeof arg === "string") {
        return scanCSV({ ...options, path: arg });
    }
    options = { ...readCsvDefaultOptions, ...arg };
    return (0, dataframe_2.LazyDataFrame)(polars_internal_1.default.ldf.scanCSV(options));
}
exports.scanCSV = scanCSV;
function readParquet() { }
exports.readParquet = readParquet;
function scanParquet() { }
exports.scanParquet = scanParquet;
function readIPC() { }
exports.readIPC = readIPC;
function scanIPC() { }
exports.scanIPC = scanIPC;
function scanJSON() { }
exports.scanJSON = scanJSON;
