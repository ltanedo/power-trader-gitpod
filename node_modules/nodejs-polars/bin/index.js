"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
const series = __importStar(require("./series"));
const df = __importStar(require("./dataframe"));
const datatypes_1 = require("./datatypes");
const func = __importStar(require("./functions"));
const io = __importStar(require("./io"));
const cfg = __importStar(require("./cfg"));
const lazy_1 = require("./lazy");
var pl;
(function (pl) {
    pl.Config = cfg.Config;
    pl.DataFrame = df.DataFrame;
    pl.Series = series.Series;
    pl.Int16 = datatypes_1.DataType.Int16;
    pl.Int32 = datatypes_1.DataType.Int32;
    pl.Int64 = datatypes_1.DataType.Int64;
    pl.UInt8 = datatypes_1.DataType.UInt8;
    pl.UInt16 = datatypes_1.DataType.UInt16;
    pl.UInt32 = datatypes_1.DataType.UInt32;
    pl.UInt64 = datatypes_1.DataType.UInt64;
    pl.Float32 = datatypes_1.DataType.Float32;
    pl.Float64 = datatypes_1.DataType.Float64;
    pl.Bool = datatypes_1.DataType.Bool;
    pl.Utf8 = datatypes_1.DataType.Utf8;
    pl.List = datatypes_1.DataType.List;
    pl.Date = datatypes_1.DataType.Date;
    pl.Datetime = datatypes_1.DataType.Datetime;
    pl.Time = datatypes_1.DataType.Time;
    pl.Object = datatypes_1.DataType.Object;
    pl.Categorical = datatypes_1.DataType.Categorical;
    pl.repeat = func.repeat;
    pl.concat = func.concat;
    // IO
    pl.scanCSV = io.scanCSV;
    pl.scanJSON = io.scanJSON;
    pl.scanParquet = io.scanParquet;
    pl.readCSV = io.readCSV;
    pl.scanIPC = io.scanIPC;
    pl.readIPC = io.readIPC;
    pl.readParquet = io.readParquet;
    pl.readJSON = io.readJSON;
    // lazy
    pl.col = lazy_1.funcs.col;
    pl.cols = lazy_1.funcs.cols;
    pl.lit = lazy_1.funcs.lit;
    pl.arange = lazy_1.funcs.arange;
    pl.argSortBy = lazy_1.funcs.argSortBy;
    pl.avg = lazy_1.funcs.avg;
    pl.concatList = lazy_1.funcs.concatList;
    pl.concatString = lazy_1.funcs.concatString;
    pl.count = lazy_1.funcs.count;
    pl.cov = lazy_1.funcs.cov;
    pl.exclude = lazy_1.funcs.exclude;
    pl.first = lazy_1.funcs.first;
    pl.format = lazy_1.funcs.format;
    pl.groups = lazy_1.funcs.groups;
    pl.head = lazy_1.funcs.head;
    pl.last = lazy_1.funcs.last;
    pl.mean = lazy_1.funcs.mean;
    pl.median = lazy_1.funcs.median;
    pl.nUnique = lazy_1.funcs.nUnique;
    pl.pearsonCorr = lazy_1.funcs.pearsonCorr;
    pl.quantile = lazy_1.funcs.quantile;
    pl.select = lazy_1.funcs.select;
    pl.spearmanRankCorr = lazy_1.funcs.spearmanRankCorr;
    pl.tail = lazy_1.funcs.tail;
    pl.list = lazy_1.funcs.list;
    pl.when = lazy_1.when.when;
})(pl || (pl = {}));
module.exports = pl;
