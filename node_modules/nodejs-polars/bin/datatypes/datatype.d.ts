import { Field } from "./field";
export declare abstract class DataType {
    get variant(): string;
    protected identity: string;
    protected get inner(): null | any[];
    equals(other: DataType): boolean;
    /** Null type */
    static get Null(): DataType;
    /** `true` and `false`. */
    static get Bool(): DataType;
    /** An `i8` */
    static get Int8(): DataType;
    /** An `i16` */
    static get Int16(): DataType;
    /** An `i32` */
    static get Int32(): DataType;
    /** An `i64` */
    static get Int64(): DataType;
    /** An `u8` */
    static get UInt8(): DataType;
    /** An `u16` */
    static get UInt16(): DataType;
    /** An `u32` */
    static get UInt32(): DataType;
    /** An `u64` */
    static get UInt64(): DataType;
    /** A `f32` */
    static get Float32(): DataType;
    /** A `f64` */
    static get Float64(): DataType;
    static get Date(): DataType;
    /** Time of day type */
    static get Time(): DataType;
    /** Type for wrapping arbitrary JS objects */
    static get Object(): DataType;
    /** A categorical encoding of a set of strings  */
    static get Categorical(): DataType;
    /** Decimal type */
    static Decimal(precision?: number, scale?: number): DataType;
    /**
     * Calendar date and time type
     * @param timeUnit any of 'ms' | 'ns' | 'us'
     * @param timeZone timezone string as defined by Intl.DateTimeFormat `America/New_York` for example.
     */
    static Datetime(timeUnit?: TimeUnit | "ms" | "ns" | "us", timeZone?: string | null | undefined): DataType;
    /**
     * Nested list/array type
     *
     * @param inner The `DataType` of values within the list
     *
     */
    static List(inner: DataType): DataType;
    /**
     * List of fixed length
     * This is called `Array` in other polars implementations, but `Array` is widely used in JS, so we use `FixedSizeList` instead.
     *
     */
    static FixedSizeList(inner: DataType, listSize: number): DataType;
    /**
     * Struct type
     */
    static Struct(fields: Field[]): DataType;
    static Struct(fields: {
        [key: string]: DataType;
    }): DataType;
    /** A variable-length UTF-8 encoded string whose offsets are represented as `i64`. */
    static get Utf8(): DataType;
    static get String(): DataType;
    toString(): string;
    toJSON(): {
        [x: string]: {
            [x: string]: any;
        };
    } | {
        [x: string]: string;
    };
    asFixedSizeList(): (this & FixedSizeList) | null;
}
export declare class Null extends DataType {
}
export declare class Bool extends DataType {
}
export declare class Int8 extends DataType {
}
export declare class Int16 extends DataType {
}
export declare class Int32 extends DataType {
}
export declare class Int64 extends DataType {
}
export declare class UInt8 extends DataType {
}
export declare class UInt16 extends DataType {
}
export declare class UInt32 extends DataType {
}
export declare class UInt64 extends DataType {
}
export declare class Float32 extends DataType {
}
export declare class Float64 extends DataType {
}
export declare class Date extends DataType {
}
export declare class Time extends DataType {
}
export declare class Object_ extends DataType {
}
export declare class Utf8 extends DataType {
}
export declare class String extends DataType {
}
export declare class Categorical extends DataType {
}
export declare class Decimal extends DataType {
    private precision;
    private scale;
    constructor(precision?: number, scale?: number);
    get inner(): (number | null)[];
    equals(other: DataType): boolean;
    toJSON(): {
        [x: string]: {
            [x: string]: {
                precision: number | null;
                scale: number | null;
            };
        };
    };
}
/**
 * Datetime type
 */
export declare class Datetime extends DataType {
    private timeUnit;
    private timeZone?;
    constructor(timeUnit?: TimeUnit | "ms" | "ns" | "us", timeZone?: (string | null) | undefined);
    get inner(): (string | null | undefined)[];
    equals(other: DataType): boolean;
}
export declare class List extends DataType {
    protected __inner: DataType;
    constructor(__inner: DataType);
    get inner(): DataType[];
    equals(other: DataType): boolean;
}
export declare class FixedSizeList extends DataType {
    protected __inner: DataType;
    protected listSize: number;
    constructor(__inner: DataType, listSize: number);
    get inner(): [DataType, number];
    equals(other: DataType): boolean;
    toJSON(): {
        [x: string]: {
            [x: string]: {
                type: {
                    [x: string]: {
                        [x: string]: any;
                    };
                } | {
                    [x: string]: string;
                };
                size: number;
            };
        };
    };
}
export declare class Struct extends DataType {
    private fields;
    constructor(inner: {
        [name: string]: DataType;
    } | Field[]);
    get inner(): Field[];
    equals(other: DataType): boolean;
    toJSON(): any;
}
/**
 * Datetime time unit
 */
export declare enum TimeUnit {
    Nanoseconds = "ns",
    Microseconds = "us",
    Milliseconds = "ms"
}
/**
 * @ignore
 * Timeunit namespace
 */
export declare namespace TimeUnit {
    function from(s: "ms" | "ns" | "us"): TimeUnit;
}
/**
 * Datatype namespace
 */
export declare namespace DataType {
    type Categorical = import(".").Categorical;
    type Int8 = import(".").Int8;
    type Int16 = import(".").Int16;
    type Int32 = import(".").Int32;
    type Int64 = import(".").Int64;
    type UInt8 = import(".").UInt8;
    type UInt16 = import(".").UInt16;
    type UInt32 = import(".").UInt32;
    type UInt64 = import(".").UInt64;
    type Float32 = import(".").Float32;
    type Float64 = import(".").Float64;
    type Bool = import(".").Bool;
    type Utf8 = import(".").Utf8;
    type String = import(".").String;
    type List = import(".").List;
    type FixedSizeList = import(".").FixedSizeList;
    type Date = import(".").Date;
    type Datetime = import(".").Datetime;
    type Time = import(".").Time;
    type Object = import(".").Object_;
    type Null = import(".").Null;
    type Struct = import(".").Struct;
    type Decimal = import(".").Decimal;
    /**
     * deserializes a datatype from the serde output of rust polars `DataType`
     * @param dtype dtype object
     */
    function deserialize(dtype: any): DataType;
}
