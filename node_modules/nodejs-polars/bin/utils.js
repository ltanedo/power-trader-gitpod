"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.regexToString = exports.isExprArray = exports.isExpr = exports.isSeriesArray = exports.isSeries = exports.isDataFrameArray = exports.isDataFrame = exports.range = exports.isPath = exports.selectionToExprList = exports.columnOrColumnsStrict = exports.columnOrColumns = void 0;
const expr_1 = require("./lazy/expr");
const path_1 = __importDefault(require("path"));
const types_1 = require("util/types");
function columnOrColumns(columns) {
    if (columns) {
        return columnOrColumnsStrict(columns);
    }
}
exports.columnOrColumns = columnOrColumns;
function columnOrColumnsStrict(...columns) {
    return columns.flat(3);
}
exports.columnOrColumnsStrict = columnOrColumnsStrict;
function selectionToExprList(columns, stringToLit) {
    return [columns].flat(3).map(expr => (0, expr_1.exprToLitOrExpr)(expr, stringToLit)._expr);
}
exports.selectionToExprList = selectionToExprList;
function isPath(s, expectedExtensions) {
    const { base, ext, name } = path_1.default.parse(s);
    return Boolean(base && ext && name) && !!(expectedExtensions?.includes(ext));
}
exports.isPath = isPath;
const range = (start, end) => {
    const length = end - start;
    return Array.from({ length }, (_, i) => start + i);
};
exports.range = range;
const isDataFrame = (ty) => (0, types_1.isExternal)(ty?._df);
exports.isDataFrame = isDataFrame;
const isDataFrameArray = (ty) => Array.isArray(ty) && (0, types_1.isExternal)(ty[0]?._df);
exports.isDataFrameArray = isDataFrameArray;
const isSeries = (ty) => (0, types_1.isExternal)(ty._series);
exports.isSeries = isSeries;
const isSeriesArray = (ty) => Array.isArray(ty) && (0, types_1.isExternal)(ty[0]?._series);
exports.isSeriesArray = isSeriesArray;
const isExpr = (ty) => (0, types_1.isExternal)(ty?._expr);
exports.isExpr = isExpr;
const isExprArray = (ty) => Array.isArray(ty) && (0, types_1.isExternal)(ty[0]?._expr);
exports.isExprArray = isExprArray;
const regexToString = (r) => {
    if ((0, types_1.isRegExp)(r)) {
        return r.source;
    }
    return r;
};
exports.regexToString = regexToString;
