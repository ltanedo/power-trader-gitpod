/// <reference types="node" />
import { Stream } from "stream";
export declare type DtypeToPrimitive<T> = T extends DataType.Bool ? boolean : T extends DataType.Utf8 ? string : T extends DataType.Datetime ? number | Date : T extends DataType.Date ? Date : T extends DataType.UInt64 ? bigint : T extends DataType.Int64 ? bigint : number;
export declare type PrimitiveToDtype<T> = T extends boolean ? DataType.Bool : T extends string ? DataType.Utf8 : T extends Date ? DataType.Datetime : T extends number ? DataType.Float64 : T extends bigint ? DataType.Int64 : T extends ArrayLike<any> ? DataType.List : DataType.Object;
export declare type TypedArray = Int8Array | Int16Array | Int32Array | BigInt64Array | Uint8Array | Uint16Array | Uint32Array | BigInt64Array | Float32Array | Float64Array;
export declare type DtypeToTypedArray<T> = T extends DataType.Int8 ? Int8Array : T extends DataType.Int16 ? Int16Array : T extends DataType.Int32 ? Int32Array : T extends DataType.Int64 ? BigInt64Array : T extends DataType.UInt8 ? Uint8Array : T extends DataType.UInt16 ? Uint16Array : T extends DataType.UInt32 ? Uint32Array : T extends DataType.UInt64 ? BigInt64Array : T extends DataType.Float32 ? Float32Array : T extends DataType.Float64 ? Float64Array : never;
export declare type Optional<T> = T | undefined;
export declare enum DataType {
    Int8 = 0,
    Int16 = 1,
    Int32 = 2,
    Int64 = 3,
    UInt8 = 4,
    UInt16 = 5,
    UInt32 = 6,
    UInt64 = 7,
    Float32 = 8,
    Float64 = 9,
    Bool = 10,
    Utf8 = 11,
    List = 12,
    Date = 13,
    Datetime = 14,
    Time = 15,
    Object = 16,
    Categorical = 17
}
export declare type JsDataFrame = any;
export declare type NullValues = string | Array<string> | Record<string, string>;
export declare type ReadCsvOptions = {
    batchSize?: number;
    columns?: Array<string>;
    commentChar?: string;
    encoding?: "utf8" | "utf8-lossy";
    endRows?: number;
    file: string;
    hasHeader: boolean;
    ignoreErrors?: boolean;
    inferSchemaLength?: number;
    lowMemory?: boolean;
    nullValues?: NullValues;
    numThreads?: number;
    parseDates?: boolean;
    projection?: Array<number>;
    quoteChar?: string;
    rechunk?: boolean;
    sep?: string;
    startRows?: number;
};
export declare type ReadJsonOptions = Partial<{
    file: string;
    inferSchemaLength?: number;
    batchSize?: number;
    inline?: boolean;
}>;
export declare type JoinBaseOptions = {
    how?: "left" | "inner" | "outer" | "cross";
    suffix?: string;
};
export declare type JoinOptions = {
    leftOn?: string | Array<string>;
    rightOn?: string | Array<string>;
    on?: string | Array<string>;
    how?: "left" | "inner" | "outer" | "cross";
    suffix?: string;
};
export declare type WriteCsvOptions = {
    dest?: string | Stream;
    hasHeader?: boolean;
    sep?: string;
};
export declare type WriteJsonOptions = {
    file?: string;
    multiline?: boolean;
};
export declare const DTYPE_TO_FFINAME: Record<DataType, string>;
export declare const polarsTypeToConstructor: (dtype: DataType) => CallableFunction;
