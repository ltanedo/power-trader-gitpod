import { Expr } from "./lazy/expr";
import type { Series } from "./series";
import type { DataFrame } from "./dataframe";
export declare type ValueOrArray<T> = T | Array<ValueOrArray<T>>;
export declare type ColumnSelection = ValueOrArray<string>;
export declare type ExpressionSelection = ValueOrArray<Expr>;
export declare type ColumnsOrExpr = ColumnSelection | ExpressionSelection;
export declare type ExprOrString = Expr | string;
export declare type DownsampleRule = "month" | "week" | "day" | "hour" | "minute" | "second";
export declare type FillNullStrategy = "backward" | "forward" | "mean" | "min" | "max" | "zero" | "one";
export declare type RankMethod = "average" | "min" | "max" | "dense" | "ordinal" | "random";
export declare type RollingOptions = {
    windowSize: number;
    weights?: Array<number>;
    minPeriods?: number;
    center?: boolean;
};
export declare function columnOrColumns(columns: ColumnSelection | string | Array<string> | undefined): Array<string> | undefined;
export declare function columnOrColumnsStrict(...columns: string[] | ValueOrArray<string>[]): Array<string>;
export declare function selectionToExprList(columns: any[], stringToLit?: any): Expr[];
export declare function isPath(s: string, expectedExtensions?: string[]): boolean;
export declare const range: (start: number, end: number) => number[];
export declare const isDataFrame: (ty: any) => ty is DataFrame;
export declare const isDataFrameArray: (ty: any) => ty is DataFrame[];
export declare const isSeries: <T>(ty: any) => ty is Series<T>;
export declare const isSeriesArray: <T>(ty: any) => ty is Series<T>[];
export declare const isExpr: (ty: any) => ty is Expr;
export declare const isExprArray: (ty: any) => ty is Expr[];
export declare const regexToString: (r: string | RegExp) => string;
