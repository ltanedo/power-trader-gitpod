import * as series from "./series";
import * as df from "./dataframe";
import { DataType, Field as _field } from "./datatypes";
export { DataType } from "./datatypes";
import * as func from "./functions";
import * as io from "./io";
import * as cfg from "./cfg";
import * as ldf from "./lazy/dataframe";
export * from "./series";
export * from "./dataframe";
export * from "./functions";
export * from "./io";
export * from "./cfg";
export * from "./lazy/dataframe";
export * from "./lazy";
import * as lazy from "./lazy";
export * from "./types";
import * as sql from "./sql";
export type { GroupBy } from "./groupby";
export declare namespace pl {
    export import Expr = lazy.Expr;
    export import DataFrame = df.DataFrame;
    export import LazyDataFrame = ldf.LazyDataFrame;
    export import Series = series.Series;
    type LazyGroupBy = lazy.LazyGroupBy;
    type When = lazy.When;
    type Then = lazy.Then;
    type ChainedWhen = lazy.ChainedWhen;
    type ChainedThen = lazy.ChainedThen;
    export import Config = cfg.Config;
    export import Field = _field;
    export import repeat = func.repeat;
    export import concat = func.concat;
    export import scanCSV = io.scanCSV;
    export import scanJson = io.scanJson;
    export import scanIPC = io.scanIPC;
    export import scanParquet = io.scanParquet;
    export import readRecords = io.readRecords;
    export import readCSV = io.readCSV;
    export import readIPC = io.readIPC;
    export import readJSON = io.readJSON;
    export import readParquet = io.readParquet;
    export import readAvro = io.readAvro;
    export import readCSVStream = io.readCSVStream;
    export import readJSONStream = io.readJSONStream;
    export import col = lazy.col;
    export import nth = lazy.nth;
    export import cols = lazy.cols;
    export import lit = lazy.lit;
    export import intRange = lazy.intRange;
    export import intRanges = lazy.intRanges;
    export import argSortBy = lazy.argSortBy;
    export import avg = lazy.avg;
    export import concatList = lazy.concatList;
    export import concatString = lazy.concatString;
    export import count = lazy.count;
    export import cov = lazy.cov;
    export import exclude = lazy.exclude;
    export import element = lazy.element;
    export import first = lazy.first;
    export import format = lazy.format;
    export import groups = lazy.groups;
    export import head = lazy.head;
    export import last = lazy.last;
    export import mean = lazy.mean;
    export import median = lazy.median;
    export import nUnique = lazy.nUnique;
    export import pearsonCorr = lazy.pearsonCorr;
    export import quantile = lazy.quantile;
    export import select = lazy.select;
    export import struct = lazy.struct;
    export import allHorizontal = lazy.allHorizontal;
    export import anyHorizontal = lazy.anyHorizontal;
    export import minHorizontal = lazy.minHorizontal;
    export import maxHorizontal = lazy.maxHorizontal;
    export import sumHorizontal = lazy.sumHorizontal;
    export import spearmanRankCorr = lazy.spearmanRankCorr;
    export import tail = lazy.tail;
    export import list = lazy.list;
    export import when = lazy.when;
    const version: any;
    type Categorical = import("./datatypes").Categorical;
    type Int8 = import("./datatypes").Int8;
    type Int16 = import("./datatypes").Int16;
    type Int32 = import("./datatypes").Int32;
    type Int64 = import("./datatypes").Int64;
    type UInt8 = import("./datatypes").UInt8;
    type UInt16 = import("./datatypes").UInt16;
    type UInt32 = import("./datatypes").UInt32;
    type UInt64 = import("./datatypes").UInt64;
    type Float32 = import("./datatypes").Float32;
    type Float64 = import("./datatypes").Float64;
    type Bool = import("./datatypes").Bool;
    type Utf8 = import("./datatypes").Utf8;
    type String = import("./datatypes").String;
    type List = import("./datatypes").List;
    type FixedSizeList = import("./datatypes").FixedSizeList;
    type Date = import("./datatypes").Date;
    type Datetime = import("./datatypes").Datetime;
    type Time = import("./datatypes").Time;
    type Object = import("./datatypes").Object_;
    type Null = import("./datatypes").Null;
    type Struct = import("./datatypes").Struct;
    type Decimal = import("./datatypes").Decimal;
    const Categorical: DataType;
    const Int8: DataType;
    const Int16: DataType;
    const Int32: DataType;
    const Int64: DataType;
    const UInt8: DataType;
    const UInt16: DataType;
    const UInt32: DataType;
    const UInt64: DataType;
    const Float32: DataType;
    const Float64: DataType;
    const Bool: DataType;
    const Utf8: DataType;
    const String: DataType;
    const List: typeof DataType.List;
    const FixedSizeList: typeof DataType.FixedSizeList;
    const Date: DataType;
    const Datetime: typeof DataType.Datetime;
    const Time: DataType;
    const Object: DataType;
    const Null: DataType;
    const Struct: typeof DataType.Struct;
    const Decimal: typeof DataType.Decimal;
    /**
     * Run SQL queries against DataFrame/LazyFrame data.
     *
     * @warning This functionality is considered **unstable**, although it is close to being
     * considered stable. It may be changed at any point without it being considered
     * a breaking change.
     */
    function SQLContext(frames?: Record<string, DataFrame | LazyDataFrame>): sql.SQLContext;
}
export default pl;
export import Expr = lazy.Expr;
export import DataFrame = df.DataFrame;
export import LazyDataFrame = ldf.LazyDataFrame;
export import Series = series.Series;
export type LazyGroupBy = lazy.LazyGroupBy;
export type When = lazy.When;
export type Then = lazy.Then;
export type ChainedWhen = lazy.ChainedWhen;
export type ChainedThen = lazy.ChainedThen;
export import Config = cfg.Config;
export import Field = _field;
export import repeat = func.repeat;
export import concat = func.concat;
export import scanCSV = io.scanCSV;
export import scanJson = io.scanJson;
export import scanIPC = io.scanIPC;
export import scanParquet = io.scanParquet;
export import readRecords = io.readRecords;
export import readCSV = io.readCSV;
export import readIPC = io.readIPC;
export import readJSON = io.readJSON;
export import readParquet = io.readParquet;
export import readAvro = io.readAvro;
export import readCSVStream = io.readCSVStream;
export import readJSONStream = io.readJSONStream;
export import col = lazy.col;
export import cols = lazy.cols;
export import lit = lazy.lit;
export import intRange = lazy.intRange;
export import intRanges = lazy.intRanges;
export import argSortBy = lazy.argSortBy;
export import avg = lazy.avg;
export import concatList = lazy.concatList;
export import concatString = lazy.concatString;
export import count = lazy.count;
export import cov = lazy.cov;
export import exclude = lazy.exclude;
export import element = lazy.element;
export import first = lazy.first;
export import format = lazy.format;
export import groups = lazy.groups;
export import head = lazy.head;
export import last = lazy.last;
export import mean = lazy.mean;
export import median = lazy.median;
export import nUnique = lazy.nUnique;
export import pearsonCorr = lazy.pearsonCorr;
export import quantile = lazy.quantile;
export import select = lazy.select;
export import struct = lazy.struct;
export import allHorizontal = lazy.allHorizontal;
export import anyHorizontal = lazy.anyHorizontal;
export import minHorizontal = lazy.minHorizontal;
export import maxHorizontal = lazy.maxHorizontal;
export import sumHorizontal = lazy.sumHorizontal;
export import spearmanRankCorr = lazy.spearmanRankCorr;
export import tail = lazy.tail;
export import list = lazy.list;
export import when = lazy.when;
export declare const version: any;
export type Categorical = import("./datatypes").Categorical;
export type Int8 = import("./datatypes").Int8;
export type Int16 = import("./datatypes").Int16;
export type Int32 = import("./datatypes").Int32;
export type Int64 = import("./datatypes").Int64;
export type UInt8 = import("./datatypes").UInt8;
export type UInt16 = import("./datatypes").UInt16;
export type UInt32 = import("./datatypes").UInt32;
export type UInt64 = import("./datatypes").UInt64;
export type Float32 = import("./datatypes").Float32;
export type Float64 = import("./datatypes").Float64;
export type Bool = import("./datatypes").Bool;
export type Utf8 = import("./datatypes").Utf8;
export type String = import("./datatypes").String;
export type List = import("./datatypes").List;
export type FixedSizeList = import("./datatypes").FixedSizeList;
export type Date = import("./datatypes").Date;
export type Datetime = import("./datatypes").Datetime;
export type Time = import("./datatypes").Time;
export type Object = import("./datatypes").Object_;
export type Null = import("./datatypes").Null;
export type Struct = import("./datatypes").Struct;
export type Decimal = import("./datatypes").Decimal;
export declare const Categorical: DataType;
export declare const Int8: DataType;
export declare const Int16: DataType;
export declare const Int32: DataType;
export declare const Int64: DataType;
export declare const UInt8: DataType;
export declare const UInt16: DataType;
export declare const UInt32: DataType;
export declare const UInt64: DataType;
export declare const Float32: DataType;
export declare const Float64: DataType;
export declare const Bool: DataType;
export declare const Utf8: DataType;
export declare const String: DataType;
export declare const List: typeof DataType.List;
export declare const FixedSizeList: typeof DataType.FixedSizeList;
export declare const Date: DataType;
export declare const Datetime: typeof DataType.Datetime;
export declare const Time: DataType;
export declare const Object: DataType;
export declare const Null: DataType;
export declare const Struct: typeof DataType.Struct;
export declare const Decimal: typeof DataType.Decimal;
/**
 * Run SQL queries against DataFrame/LazyFrame data.
 *
 * @warning This functionality is considered **unstable**, although it is close to being
 * considered stable. It may be changed at any point without it being considered
 * a breaking change.
 */
export declare function SQLContext(frames?: Record<string, DataFrame | LazyDataFrame>): sql.SQLContext;
